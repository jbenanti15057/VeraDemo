pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
                powershell 'mvn package'
            }
        }
      stage('SCA SC') {
         steps {
	 withCredentials([string(credentialsId: 'SRCCLR_API_TOKEN', variable: 'SRCCLR_API_TOKEN')]) {
		powershell """
                  Set-ExecutionPolicy AllSigned -Scope Process -Force
                  iex ((New-Object System.Net.WebClient).DownloadString('https://download.srcclr.com/ci.ps1')) 
                  srcclr scan --ws A77HY8b --allow-dirty .
		        """
             }
	    }
         }
	stage('Veracode Pipeline Scan') {
            steps {
	    withCredentials([string(credentialsId: 'VERACODE_API_ID', variable: 'veracode_api_id'), string(credentialsId: 'VERACODE_API_KEY', variable: 'veracode_api_key')]) {
                powershell """
                  curl  https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip -o pipeline-scan.zip
                  Expand-Archive -Force -Path pipeline-scan.zip -DestinationPath veracode_scanner
                  java -jar veracode_scanner\\pipeline-scan.jar --veracode_api_id '${VERACODE_API_ID}' \
                  --veracode_api_key '${VERACODE_API_KEY}' \
                  --file target/verademo.war
                """
			}
		}
	}
  
  stage('Veracode Sandbox Scan') {
            steps {
      withCredentials([string(credentialsId: 'VERACODE_API_ID', variable: 'veracode_api_id'), string(credentialsId: 'VERACODE_API_KEY', variable: 'veracode_api_key')]) {
        veracode applicationName: "${VERACODE_APP_NAME}", criticality: 'VeryHigh', debug: true, timeout: 20, fileNamePattern: '', pHost: '', pPassword: '', pUser: '', replacementPattern: '', sandboxName: '', scanExcludesPattern: '', scanIncludesPattern: '', scanName: "${BUILD_TAG}", uploadExcludesPattern: '', uploadIncludesPattern: 'target/verademo.war', vid: "${VERACODE_API_ID}", vkey: "${VERACODE_API_KEY}"
}
  
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
	post {
	    always {
	      archiveArtifacts artifacts: 'results.json', fingerprint: true
	    }
	}
}
